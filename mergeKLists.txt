import java.util.ArrayList;
import java.util.List;

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {

    public ListNode merge(ListNode listNode1 , ListNode listNode2){
        ListNode listNode = new ListNode(0);
        ListNode cur = listNode;
        while(listNode1!=null && listNode2!=null){
            if(listNode1.val < listNode2.val){
                cur.next = new ListNode(listNode1.val);
                listNode1 = listNode1.next;
            }else{
                cur.next = new ListNode(listNode2.val);
                listNode2 = listNode2.next;
            }
            cur = cur.next;
        }
        

        if(listNode1 == null && listNode2 == null){

        } else if(listNode1 == null){
            while(listNode2 != null){
                cur.next = new ListNode(listNode2.val);
                cur = cur.next;
                listNode2 = listNode2.next;
            }
        }else{
            while(listNode1 != null){
                cur.next = new ListNode(listNode1.val);
                cur = cur.next;
                listNode1 = listNode1.next;
            }
        }
        listNode = listNode.next;
        return listNode;
    }

    public ListNode[] function(ListNode[] listNodes){
        List<ListNode> list = new ArrayList<>();
        int len = listNodes.length;
        int index = 0;
        if(listNodes.length%2 == 1){
            len = listNodes.length-1;
            index = 1;
        }
        for(int i=0; i<len; i+=2){
            ListNode listNode = merge(listNodes[i],listNodes[i+1]);
            list.add(listNode);
        }
        if(index == 1)
            list.add(listNodes[len]);
        ListNode[] result = new ListNode[list.size()];

        list.toArray(result);
        return result;
    }

    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0)
            return null;
        while(lists.length > 1){
            lists = function(lists);
        }
        return lists[0];
    }
}